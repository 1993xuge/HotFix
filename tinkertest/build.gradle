apply plugin: 'com.android.application'

android {
    compileSdkVersion 28
    defaultConfig {
        applicationId "com.xuge.tinkertest"
        minSdkVersion 24
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    signingConfigs {
        release {
            keyAlias "xuge"
            keyPassword "123456"
            storeFile file("../sign/xuge")
            storePassword "123456"
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }

}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'

    //可选，用于生成application类
    compileOnly('com.tencent.tinker:tinker-android-anno:1.9.1')
    //tinker的核心库
    implementation('com.tencent.tinker:tinker-android-lib:1.9.1')
}

// buildDir就指的是moudle下的build文件夹
def bakPath = file("${buildDir}/bakApk")
ext {
    tinkerEnable = true
    tinkerOldApkPath = "${bakPath}/"
    tinkerApplyMappingPath = "${bakPath}/"
    tinkerApplyResourceMappingPath = "${bakPath}/"
    tinkerId = "1.0"
}

def buildWithTinker() {
    return ext.tinkerEnable
}

def getOldApkPath() {
    return ext.tinkerOldApkPath
}

def getApplyMappingPath() {
    return ext.tinkerApplyMappingPath
}

def getApplyResourceMappingPath() {
    return ext.tinkerApplyResourceMappingPath
}

def getTinkerIdValue() {
    return ext.tinkerId
}

if (buildWithTinker()) {
    // 1) apply tinker插件
    apply plugin: 'com.tencent.tinker.patch'

    // 2) 包含所有tinker相关的参数配置
    tinkerPatch { // 全局信息相关的配置项
        // 指定上一个版本的apk路径
        oldApk = getOldApkPath() // 基准apk包的路径，必须输入，否则会报错。

        // 是否忽略Tinker的警告；如果在生成patch文件时，如果有一些配置错误，tinker会警告我们。
        // 设置为false，如果一旦出现了警告，那么tinker就会终止当前patch文件的生成
        ignoreWarning = false

        // 是否使用签名
        useSign = true

        // 指定是否启动Tinker
        tinkerEnable = buildWithTinker()

        buildConfig { // 编译相关的配置项

            // 指定old apk打包时使用的混淆文件
            // patch文件也是需要混淆的，必须要与apk打包时使用的混淆文件是一致的，
            // 这样才能保证打包出来的patch文件才能顺利安装到apk上
            applyMapping = getApplyMappingPath()

            // 指定old apk的资源文件
            applyResourceMapping = getApplyResourceMappingPath()

            // 指定 tinker id，每个patch文件的唯一标识符，它必须与我们的apk一致，才能打包到apk中。
            tinkerId = getTinkerIdValue()

            keepDexApply = false
        }

        dex {
            // 指定dex的模式，可取值有：jar和raw
            dexMode = "jar"

            // 指定dex文件目录
            pattern = ["classes*.dex", "assets/secondary-dex-?.jar"]

            // 指定自定义的Application
            loader = [""]
        }

        lib {
            pattern = ["libs/*/*.so"]
        }

        res {
            // 指定了Tinker可以修改的资源文件路径
            pattern = ["res/*", "assets/*", "resource.arcs", "AndroidManifest.xml"]

            // 指定了即使修改了也不在patch中生效的文件路径
            ignoreChange = ["assets/sample_meta.txt"]

            largeModSize = 100
        }

        packageConfig {
            // key-value，说明相关信息
            configField("patchMessage", "fix the 1.0 version bug")
            configField("patchVersion", "1.0")
        }

        sevenZip {

        }
    }

    // copy 脚本
    List<String> flavors = new ArrayList<>()
    // 遍历所有的 Flavor
    project.android.productFlavors.each { flavor ->
        flavors.add(flavor.name)
    }
    // size>0,表明有Flavor
    boolean hasFlavors = flavors.size() > 0

    /**
     * 复制基准包和其它必须文件到指定目录
     */
    android.applicationVariants.all { variant ->
        /**
         * task type, you want to bak
         */
        def taskName = variant.name
        logger.quiet("xuge: ${variant.name}")
        def date = new Date().format("MMdd-HH-mm-ss")

        tasks.all {
            if ("assemble${taskName.capitalize()}".equalsIgnoreCase(it.name)) {

                it.doLast {
                    copy {
                        def fileNamePrefix = "${project.name}-${variant.baseName}"
                        logger.quiet("xuge: fileNamePrefix = ${fileNamePrefix} hasFlavors = ${hasFlavors}")
                        def newFileNamePrefix = hasFlavors ? "${fileNamePrefix}" : "${fileNamePrefix}-${date}"

                        def destPath = hasFlavors ? file("${bakPath}/${project.name}-${date}/${variant.flavorName}") : bakPath
                        logger.quiet("xuge: destPath = ${destPath}")
                        // apk输出文件 移动到指定目录并改名
                        from variant.outputs.first().outputFile
                        into destPath
                        rename { String fileName ->
                            fileName.replace("${fileNamePrefix}.apk", "${newFileNamePrefix}.apk")
                        }

                        // mapping.txt文件 移动并改名
                        from "${buildDir}/outputs/mapping/${variant.dirName}/mapping.txt"
                        into destPath
                        rename { String fileName ->
                            fileName.replace("mapping.txt", "${newFileNamePrefix}-mapping.txt")
                        }

                        from "${buildDir}/intermediates/symbols/${variant.dirName}/R.txt"
                        into destPath
                        rename { String fileName ->
                            fileName.replace("R.txt", "${newFileNamePrefix}-R.txt")
                        }
                    }
                }
            }
        }
    }


}